import os
import webbrowser
from typing import Dict, List

import requests
from jinja2 import Template


def gen_pages(
    universities_completed_sorted,
    universities_uncompleted_sorted,
    optional_data=None,
):
    template_str = """
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
        <meta charset="UTF-8">
        <title>{{ page_title }}</title>
        <link href="https://laoshubaby.oss-cn-beijing.aliyuncs.com/static/registry.moe.gov.hx.css" rel="stylesheet" />
    </head>
    <body>
        <h1>{{ page_title }} (Completed Count: {{ universities_completed_count }}/{{ universities_full_count }})</h1>
        <h2>Completed</h2>
        <table>
            <tr>
                <th style="font-size: 16px">ID</th>
                <th>简称<br/><code>short_name</code></th>
                <th>省份<br/><code>addr:province</code></th>
                <th>运营者<br/><code>operator</code></th>
                <th>中文名<br/><code>name</code></th>
                <th>英文名<br/><code>name:en</code></th>
            </tr>
            {% for university in universities_completed %}
            <tr>
                <td><a class="completed" href="https://opengeofiction.net/{{ university['@type'] }}/{{ university['@id'] }}">{{ university['@type'] }}{{ university['@id'] }}</a></td>
                <td style="text-align: center;font-weight: bold;">{{ university['short_name'] }}</td>
                <td>{{ university['addr:province'] }}</td>
                <td>{{ university['operator'] }}</td>
                <td>{{ university['name'] }}</td>
                <td>{{ university['name:en'] }}</td>
            </tr>
            {% endfor %}
        </table>
        <hr/>
        <h2>Uncompleted</h2>
        <table>
            <tr>
                <th>ID</th>
                <th>简称<br/><code>short_name</code></th>
                <th>省份<br/><code>addr:province</code></th>
                <th>运营者<br/><code>operator</code></th>
                <th>中文名<br/><code>name</code></th>
                <th>英文名<br/><code>name:en</code></th>
            </tr>
            {% for university in universities_uncompleted %}
            <tr>
                <td><a class="uncompleted"href="https://opengeofiction.net/{{ university['@type'] }}/{{ university['@id'] }}">{{ university['@type'] }}{{ university['@id'] }}</a></td>
                <td style="text-align: center;font-weight: bold;">{{ university['short_name'] }}</td>
                <td>{{ university['addr:province'] }}</td>
                <td>{{ university['operator'] }}</td>
                <td>{{ university['name'] }}</td>
                <td>{{ university['name:en'] }}</td>
            </tr>
            {% endfor %}
        </table>
    </body>
    </html>
    """

    template = Template(template_str)
    optional_data = {
        "page_title": "MOE of Republic of Huaxia - Universities List"
    }
    rendered_html = template.render(
        universities_completed=universities_completed_sorted,
        universities_uncompleted=universities_uncompleted_sorted,
        universities_completed_count=len(universities_completed_sorted),
        universities_full_count=len(universities_completed_sorted)
        + len(universities_uncompleted_sorted),
        page_title=optional_data["page_title"],
    )
    html_file_path = "https_registry.moe.gov.hx_index.html"
    with open(html_file_path, "w", encoding="utf-8") as file:
        file.write(rendered_html)
    webbrowser.open("file://" + os.path.realpath(html_file_path))


def get_plain_dataframe() -> List[Dict]:
    # dataframe also can be generated by pandas csv reader or keqing

    mode_load_method = "network"

    OVERPASS_QL_URL = "https://overpass.ogf.rent-a-planet.com/api/interpreter?data=%5Bout%3Acsv%28%0A%20%20%20%20%3A%3Atype%2C%0A%20%20%20%20%3A%3A%22id%22%2C%0A%20%20%20%20amenity%2C%0A%20%20%20%20name%2C%0A%20%20%20%20%22name%3Aen%22%2C%0A%20%20%20%20%22short_name%22%2C%0A%20%20%20%20%22addr%3Aprovince%22%2C%0A%20%20%20%20operator%3B%0A%20%20%20%20true%3B%20%22%7C%22%0A%29%5D%3B%0A%0Anwr%5Bamenity%3D{{类型}}%5D%28poly%3A%2218.049257%20149.051512%2017.970897%20148.184966%2017.704213%20147.579344%2016.599348%20147.153623%2016.612509%20147.013547%2015.884737%20146.947629%2015.533086%20146.557614%2015.776398%20145.316159%2015.541025%20145.195310%2014.317620%20145.360102%2014.104618%20145.722651%2013.036675%20145.431513%2012.522396%20145.634760%2012.071558%20146.431269%2012.431218%20146.909174%2011.730236%20147.904814%2010.493219%20148.458246%209.194298%20148.249506%208.982754%20149.468989%208.559299%20149.611811%209.069557%20151.424555%208.798231%20151.721186%209.486992%20152.858275%209.814624%20152.891234%209.899864%20153.231810%2010.082447%20153.429564%209.218695%20154.756163%208.083707%20153.893735%207.844339%20154.064023%207.904192%20154.857787%207.633755%20155.040092%207.609595%20155.113563%207.593260%20155.346679%207.793998%20155.360411%207.928676%20155.489501%208.231879%20155.523833%208.530776%20155.990752%208.799583%20156.069030%208.962403%20156.073149%2010.120307%20157.489008%2011.636101%20159.114985%2012.838587%20159.125971%2013.432372%20156.137690%2015.146375%20155.467524%2016.673036%20155.692744%2017.214270%20153.539423%2015.987740%20152.501215%2016.167202%20151.171870%2016.926765%20149.852141%2017.143416%20149.861754%2017.283777%20149.820555%2017.270663%20149.740904%2017.372922%20149.690093%2017.503939%20149.501952%2017.973509%20149.262999%2018.049257%20149.051512%22%29%3B%0A%0Aout%20meta%20asc%3B"

    mode_query_type = "university"  # college, school, research_institute

    query_result = requests.get(
        url=OVERPASS_QL_URL.replace("{{类型}}", mode_query_type),
        headers={
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0",
            "Referer": "https://registry.moe.gov.hx/index.html",
        },
    ).content.decode("utf-8")
    # # It is not recommended to read the text directly, but it is recommended to read the network directly and request
    # query_result="""@type|@id|amenity|name|name:en|short_name|addr:province|operator
    # relation|348353|university|国立上京大学|National Shangjing University|NSJU||
    # """

    header = query_result.split("\n")[0].split("|")
    df_raw = query_result.replace(str("|".join(header) + "\n"), "")

    df: List[Dict] = [
        dict(zip(header, item.split("|")))
        for item in list(filter(bool, df_raw.split("\n")))
    ]

    return df


import copy

universities_dataframe: List[Dict] = get_plain_dataframe()
universities_full: List[Dict] = copy.deepcopy(universities_dataframe)
universities_completed: List[Dict] = list(
    filter(
        bool,
        [
            item_dict if item_dict["short_name"] != "" else None
            for item_dict in universities_dataframe
        ],
    )
)
universities_uncompleted: List[Dict] = list(
    filter(
        bool,
        [
            (
                item_dict
                if (item_dict["@type"], item_dict["@id"])
                in list(
                    set([(i["@type"], i["@id"]) for i in universities_full])
                    - set(
                        [
                            (i["@type"], i["@id"])
                            for i in universities_completed
                        ]
                    )
                )
                else None
            )
            for item_dict in universities_dataframe
        ],
    )
)

# # Power saving but not elegant in my eye
# universities_uncompleted_temp: List[tuple] = list(
#     set([(i["@type"], i["@id"]) for i in universities_full])
#     - set([(i["@type"], i["@id"]) for i in universities_completed])
# )
# universities_uncompleted: List[Dict] = list(
#     filter(
#         bool,
#         [
#             (
#                 item_dict
#                 if (item_dict["@type"], item_dict["@id"])
#                 in universities_uncompleted_temp
#                 else None
#             )
#             for item_dict in universities_dataframe
#         ],
#     )
# )

universities_completed_sorted = sorted(
    universities_completed,
    key=lambda x: (x["addr:province"], x["short_name"], x["@id"]),
    reverse=True,
)
universities_uncompleted_sorted = sorted(
    universities_uncompleted, key=lambda x: x["@id"]
)
# from pprint import pprint
# pprint(universities_full)
print(
    len(universities_completed_sorted),
    "+",
    len(universities_uncompleted_sorted),
    "=",
    len(universities_full),
)

# TODO
# 1. 对short_name进行查重，出现重复的时候自动加粗标红
# 2. 自动识别母体大学，合并多个校区代码不会重复出现
# 3. 在英文名中自动识别简称可能来自的字母（首字母大写）并给出加粗该字母的建议。（可能比较困难）

gen_pages(universities_completed_sorted, universities_uncompleted_sorted)
